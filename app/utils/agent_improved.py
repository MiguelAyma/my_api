import google.generativeai as genai

from app.schemas._knowledge_entry import ImprovedEntryData
import os
import google.generativeai as genai
from dotenv import load_dotenv
from pydantic import BaseModel, Field
from typing import List

# --- PASO CLAVE: Cargar las variables de entorno desde el archivo .env ---
# Esto debe ejecutarse antes de que intentes usar la variable de entorno.
load_dotenv()


# --- Lista de √çconos Disponibles ---
try:
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("No se encontr√≥ la variable de entorno GEMINI_API_KEY. Aseg√∫rate de que tu archivo .env est√° configurado correctamente.")
    genai.configure(api_key=api_key)
except Exception as e:
    print(f"Error al configurar la API de Gemini: {e}")
    # En una aplicaci√≥n real, podr√≠as querer detener la ejecuci√≥n aqu√≠.
    exit()

# Esta lista se la pasaremos al agente en el prompt.
AVAILABLE_ICONS =[     
    "ArrowLeftIcon",
    "ArrowUpIcon",
    "ArrowRightIcon",
    "ArrowDownIcon",
    "BrandLineIcon",
    "CodeIcon",
    "BookOpenIcon",
    "ChartBarIcon",
    "ChatBubbleIcon",
    "DocumentTextIcon",
    "HomeIcon",
    "LightBulbIcon",
    "UsersIcon",
    "CogIcon",
    "CheckIcon",
    "ChevronLeftIcon",
    "CircleCheckIcon",
    "ClipboardIcon",
    "DotsVerticalIcon",
    "DownloadIcon",
    "EyeIcon",
    "EyeOffIcon",
    "FacebookIcon",
    "FiltersIcon",
    "HorizontalLinesIcon",
    "InstagramIcon",
    "ListIcon",
    "MailIcon",
    "MapPinIcon",
    "PencilIcon",
    "PhotoIcon",
    "PlusIcon",
    "RefreshIcon",
    "ShoppingCartIcon",
    "TagIcon",
    "TikTokIcon",
    "TrashIcon",
    "WhatsappIcon",
    "XIcon",
    "ZoomIcon",
    "BuildindStoreIcon",
    "SparklesIcon",
    "CoffeeIcon",
    "ToolsKitchen3Icon",
    "HammerIcon",
    "MusicIcon",
    "ScissorsIcon",
    "DeviceLaptopIcon",
    "WreckingBallIcon",
    "PlaneIcon",
    "LeafIcon",
    "Gamepad2Icon",
    "StopwatchIcon",
    "FlowerIcon",
    "BrushIcon",
    "BrainIcon",
    "AlertTriangleIcon",
    "BoltIcon",
    "CardsIcon",
    "ExclamationCircleIcon",
    "LayoutGridIcon",
    "LockIcon",
    "StatsIcon",
    "ShirtIcon",
    "BookIcon",
    "CameraIcon",
    "CarIcon",
    "HeartIcon",
    "UmbrellaIcon",
    "PaletteIcon",
    "StethoscopeIcon",
    "CampFireIcon",
    "PizzaIcon",
    "BriefcaseIcon",
    "GiftIcon",
    "HeadphonesIcon",
    "CalendarIcon",
    "TruckIcon"
]

def create_enhanced_entry_agent(title: str, content: str) -> ImprovedEntryData:
    """
    Este es el agente de IA.
    Toma un t√≠tulo y contenido, y devuelve una estructura de datos mejorada.
    """
    # Configura el modelo de Gemini
    # Aseg√∫rate de usar un modelo que soporte la salida estructurada, como gemini-2.5-flash
    model = genai.GenerativeModel(
        model_name='gemini-2.5-flash',
        generation_config={"response_mime_type": "application/json"} # Forzamos la salida JSON
    )

    # Convertimos la lista de √≠conos a un string para el prompt
    icons_list_str = ", ".join(AVAILABLE_ICONS)

    # Creamos el prompt detallado para el modelo
    prompt = f"""
    Eres un experto editor de contenido y clasificador. Tu tarea es analizar el t√≠tulo y contenido proporcionados para mejorarlos y estructurarlos.

    Sigue estas instrucciones al pie de la letra:
    1.  **Mejora el T√≠tulo**: Crea un nuevo t√≠tulo que sea m√°s claro, descriptivo y atractivo que el original.
    2.  **Mejora el Contenido**: Reescribe o formatea el contenido para que sea m√°s f√°cil de leer, corrigiendo errores gramaticales y mejorando la estructura. Puedes usar Markdown simple como negritas o listas si es necesario.
    3.  **Selecciona un √çcono**: De la siguiente lista de √≠conos disponibles, escoge UNO y solo UNO que mejor represente el tema del contenido: [{icons_list_str}].
    4.  **Genera Categor√≠as con Emojis**: Bas√°ndote en el contenido, genera una lista de 2 a 5 categor√≠as relevantes. Cada categor√≠a DEBE tener el formato "emoji Nombre de Categor√≠a". Por ejemplo: ["ü§ñ Tecnolog√≠a", "üí° Productividad"].

    T√≠tulo Original:
    "{title}"

    Contenido Original:
    "{content}"
    """

    # Hacemos la llamada al API pidiendo la salida estructurada
    # La librer√≠a se encargar√° de convertir el prompt y el esquema Pydantic
    # en la instrucci√≥n correcta para el modelo.
    response = model.generate_content(
        prompt,
        generation_config=genai.types.GenerationConfig(
             response_schema=ImprovedEntryData, # ¬°La magia sucede aqu√≠!
        )
    )
    
    # La librer√≠a ya devuelve el objeto Pydantic parseado
    return ImprovedEntryData.model_validate_json(response.text)